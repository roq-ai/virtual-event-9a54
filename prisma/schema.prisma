generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model availability {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id   String?  @db.Uuid
  staff_id   String?  @db.Uuid
  available  Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  event      event?   @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model event {
  id               String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String         @db.VarChar(255)
  description      String?        @db.VarChar(255)
  organization_id  String?        @db.Uuid
  event_manager_id String?        @db.Uuid
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  updated_at       DateTime       @default(now()) @db.Timestamp(6)
  availability     availability[]
  user             user?          @relation(fields: [event_manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization     organization?  @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  event       event[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bio                  String?  @db.VarChar(255)
  presentation_details String?  @db.VarChar(255)
  speaker_id           String?  @db.Uuid
  created_at           DateTime @default(now()) @db.Timestamp(6)
  updated_at           DateTime @default(now()) @db.Timestamp(6)
  user                 user?    @relation(fields: [speaker_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  availability availability[]
  event        event[]
  organization organization[]
  profile      profile[]
}
